CREATE materialized VIEW pmid_author 
AS SELECT DISTINCT a.pmid, 
                   Array_agg(Concat(a.fore_name, ' ', a.last_name)) AS 
                   author_name 
   FROM   medline_author a 
   GROUP  BY a.pmid;
   
   
CREATE materialized VIEW pmid_abstract 
AS SELECT DISTINCT a.pmid, 
                   Array_agg(abstract_text) AS abstract 
   FROM   medline_abstract_text a 
   GROUP  BY a.pmid 
   
   
CREATE materialized VIEW pmid_keyword 
AS SELECT DISTINCT a.pmid, 
                   Array_agg(keyword) AS keywords 
   FROM   medline_keywords a 
   GROUP  BY a.pmid 
   
   
CREATE materialized VIEW pmid_meshterms_heading 
AS SELECT DISTINCT a.pmid, 
                   Array_agg(descriptor_name) AS descriptor_name 
   FROM   medline_mesh_heading a 
   GROUP  BY a.pmid; 
   
   
CREATE materialized VIEW pmid_meshterms_qualifier 
AS SELECT DISTINCT a.pmid, 
                   Array_agg(distinct qualifier_name) AS qualifier_name 
   FROM   medline_mesh_qualifier a 
   GROUP  BY a.pmid; 
   
   
CREATE materialized VIEW pmid_details 
AS SELECT DISTINCT m.pmid, 
                   m.article_title, 
                   m.journal_title, 
                   m.pub_year, 
                   c.author_name, 
                   c1.abstract, 
                   c2.keywords, 
                   c3.descriptor_name, 
                   c4.qualifier_name 
   FROM   medline_master m 
          left join pmid_author c 
                 ON m.pmid = c.pmid 
          left join pmid_abstract c1 
                 ON m.pmid = c1.pmid 
          left join pmid_keyword c2 
                 ON m.pmid = c2.pmid 
          left join pmid_meshterms_heading c3 
                 ON m.pmid = c3.pmid 
          left join pmid_meshterms_qualifier c4 
                 ON m.pmid = c4.pmid; 


select row_to_json(pmid_details)
from pmid_details;


create materialized view pmid_journal as select distinct journal_nlmuniqueid, journal_title from medline_master ;

create materialized view journal_stats as (select journal_nlmuniqueid, count(distinct m.pmid) as count_publications, count(distinct descriptor_name) as count_meshterm from medline_master m join medlinex_rascore_nodes a on a.pmid = m.pmid join medline_mesh_heading b on b.pmid = m.pmid group by journal_nlmuniqueid );

create materialized view meshterm_stats as (select descriptor_name, count(distinct m.pmid) as count_publications, count(distinct journal_nlmuniqueid) as count_journals from medline_master m join medlinex_rascore_nodes a on a.pmid = m.pmid join medline_mesh_heading b on b.pmid = m.pmid group by descriptor_name ); 


-- VIEWS FOR FINDING JOURNAL TO JOURNAL RELATION BASED ON MESH TERMS COUNTS
create materialized view journal_pmid as select distinct journal_nlmuniqueid, descriptor_name from medline_master m join medlinex_rascore_nodes n on m.pmid = n.pmid join medline_mesh_heading h on h.pmid = m.pmid;
create materialized view journal_pmid_agg as select distinct journal_nlmuniqueid, array_agg( distinct descriptor_name) from journal_pmid group by journal_nlmuniqueid;
create materialized view journal_journal_agg as select distinct a.journal_nlmuniqueid as journal1,b.journal_nlmuniqueid as journal2,a.array_agg as descriptor_name1,b.array_agg as descriptor_name2 from journal_pmid_agg a join journal_pmid_agg b on a.journal_nlmuniqueid <> b.journal_nlmuniqueid ;
create materialized view journal_mesh_relation as (select journal1, journal2, count(distinct descriptor_name) as common_meshtermscount from (select journal1,journal2,unnest(descriptor_name1) as descriptor_name from journal_journal_agg_id intersect select journal1,journal2,unnest(descriptor_name2) as descriptor_name from journal_journal_agg_id) a group by journal1,journal2);

create materialized view journal_stats as (select journal_nlmuniqueid, count(distinct m.pmid) as count_publications, count(distinct descriptor_name) as count_meshterm from medline_master m join medlinex_rascore_nodes a on a.pmid = m.pmid join medline_mesh_heading b on b.pmid = m.pmid group by journal_nlmuniqueid );
create materialized view journal_mesh_relation_percentage as select a.journal1,a.journal2,common_meshtermscount/(b.count_meshterm+c.count_meshterm-common_meshtermscount)::float as percentage_common_meshtermscount from journal_mesh_relation a join journal_stats b on a.journal1=b.journal_nlmuniqueid join journal_stats c on a.journal2=c.journal_nlmuniqueid ;


-- Materialized view for journal to journal relation

create materialized view journal_journal_relation as select a.journal_nlmuniqueid as journal1,a.iso_abbrev as journal_name1, b.journal_nlmuniqueid as journal2,b.iso_abbrev as journal_name2,(avg(rascore::integer))::integer as rascore_avg, count(distinct b.pmid ) as count_repeatingjournals from medlinex_rascore_edges m join medline_master a on a.pmid=m.pmid join medline_master b on b.pmid = m.pmid2 group by a.journal_nlmuniqueid, b.journal_nlmuniqueid,a.iso_abbrev,b.iso_abbrev;Â 
create materialized view journal_journal_top50 as (select * from (SELECT journal1                                                    AS source,                                                                            
       journal2                                                    AS target, 
       ( rascore_avg * count_repeatingjournals )                   AS weight,journal_name1,journal_name2, 
       Rank() 
         OVER (                  
           partition BY journal1 
           ORDER BY ( rascore_avg * count_repeatingjournals )DESC) rank 
FROM   journal_journal_relation ) a where rank <=50
);
